import requests
import streamlit as st

HF_TOKEN = st.secrets["HF_TOKEN"]

def query_huggingface(event, model="HuggingFaceH4/zephyr-7b-beta"):
    prompt = f"""
–¢—ã ‚Äî AI-–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä —Å–ø—Ä–æ—Å–∞. –ù–µ –æ–±—ä—è—Å–Ω—è–π, –∫—Ç–æ —Ç—ã. –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–±—ã—Ç–∏–µ –∏ –≤—ã–¥–∞–π —Ç–æ–ª—å–∫–æ –¥–µ–ª–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

üìã –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:
- –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã
- –†–∞—Å—à–∏—Ä–∏—Ç—å –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
- –£–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ –∫—É—Ä—å–µ—Ä–æ–≤
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
- –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏—Ç—Ä–∏–Ω—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
- –£–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ ‚Äú–±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É‚Äù
- –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–π –ª–µ–Ω—Ç–µ

‚ùå –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö e-commerce –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
üìå –ü—Ä–æ–≥–Ω–æ–∑: ...
‚úÖ –î–µ–π—Å—Ç–≤–∏—è:
- ...
- ...
üë• –†–æ–ª–∏:
- ...
üß† –ü–æ—á–µ–º—É:
...

–ü—Ä–∏–º–µ—Ä:

–°–æ–±—ã—Ç–∏–µ: "14 —Ñ–µ–≤—Ä–∞–ª—è, –î–µ–Ω—å –≤—Å–µ—Ö –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö, —Å–Ω–µ–≥ –≤ –ú–æ—Å–∫–≤–µ"

üìå –ü—Ä–æ–≥–Ω–æ–∑: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ü–≤–µ—Ç—ã, –ø–æ–¥–∞—Ä–∫–∏, –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã. –ò–∑-–∑–∞ —Å–Ω–µ–≥–æ–ø–∞–¥–∞ –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –∫—É—Ä—å–µ—Ä–æ–≤.
‚úÖ –î–µ–π—Å—Ç–≤–∏—è:
- –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã –ø–æ–¥–∞—Ä–∫–æ–≤
- –£–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ –∫—É—Ä—å–µ—Ä–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–∞—Ä–∫–æ–≤
- –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏—Ç—Ä–∏–Ω—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥ –≤–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

üë• –†–æ–ª–∏:
- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
- –°–∫–ª–∞–¥
- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥

üß† –ü–æ—á–µ–º—É:
–°–Ω–µ–≥ + –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å–æ–∑–¥–∞—é—Ç –ø–∏–∫–æ–≤—ã–π —Å–ø—Ä–æ—Å –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏. –ù—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ.

[–°–¢–û–ü –ü–†–ò–ú–ï–†]

–°–æ–±—ã—Ç–∏–µ: {event}
–û—Ç–≤–µ—Ç:
"""

    url = f"https://api-inference.huggingface.co/models/{model}"
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 300,
            "temperature": 0.6,
            "top_p": 0.85
        }
    }

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        if isinstance(result, list) and "generated_text" in result[0]:
            return clean_response(result[0]["generated_text"])
        return "[‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞]"
    except Exception as e:
        return f"[‚ùå –û—à–∏–±–∫–∞ LLM: {str(e)}]"

def clean_response(raw_text):
    if "[–°–¢–û–ü –ü–†–ò–ú–ï–†]" in raw_text:
        raw_text = raw_text.split("[–°–¢–û–ü –ü–†–ò–ú–ï–†]")[-1]
    start = raw_text.find("üìå –ü—Ä–æ–≥–Ω–æ–∑:")
    return raw_text[start:].strip() if start != -1 else raw_text.strip()
